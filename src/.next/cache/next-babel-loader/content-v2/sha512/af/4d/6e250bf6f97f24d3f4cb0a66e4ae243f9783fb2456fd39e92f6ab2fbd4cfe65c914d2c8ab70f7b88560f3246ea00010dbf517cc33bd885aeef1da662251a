{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeObservable, observable, action } from 'mobx';\nimport AuthService from '../services/AuthService';\nimport User from '../models/User';\n\nclass UiStore {\n  constructor(rootStore) {\n    _defineProperty(this, \"onAuthStateChanged\", user => {\n      if (user) {\n        console.log(`de user is ingelogd ${user.email}`);\n        this.setCurrentUser(new User({\n          id: user.uid,\n          name: user.displayName,\n          email: user.email,\n          store: this.rootStore.userStore,\n          avatar: user.photoURL\n        }));\n      } else {\n        console.log(`de user is uitgelogd`);\n        this.setCurrentUser(undefined);\n      }\n    });\n\n    _defineProperty(this, \"loginUser\", async user => {\n      //service aanspreken\n      const result = await this.authService.login(user.email, user.password);\n      return result;\n    });\n\n    _defineProperty(this, \"logoutUser\", async () => {\n      const result = await this.authService.logout();\n      return result;\n    });\n\n    _defineProperty(this, \"registerUser\", async user => {\n      const result = await this.authService.register(user.name, user.email, user.password, user.avatar);\n      return result;\n    });\n\n    this.rootStore = rootStore;\n    this.currentUser = undefined; // this.authService = new AuthService(this.rootStore.firebase, this.onAuthStateChanged);\n\n    makeObservable(this, {\n      currentUser: observable,\n      setCurrentUser: action\n    });\n  }\n\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n\n}\n\nexport default UiStore;","map":null,"metadata":{},"sourceType":"module"}