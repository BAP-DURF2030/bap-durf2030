{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport 'firebase/auth';\n\nclass AuthService {\n  constructor(firebase, onAuthStateChanged) {\n    _defineProperty(this, \"login\", async (email, password) => {\n      try {\n        const result = await this.auth.signInWithEmailAndPassword(email, password); // indien gelukt sturen we resultaat terug ( = firebase user)\n\n        return result;\n      } catch (error) {\n        // indien error sturen we code terug\n        return error.code;\n      }\n    });\n\n    _defineProperty(this, \"logout\", async () => {\n      try {\n        const result = await this.auth.signOut();\n        return result;\n      } catch (error) {\n        return error.code;\n      }\n    });\n\n    _defineProperty(this, \"register\", async (name, email, password, avatar) => {\n      try {\n        const userCredential = await this.auth.createUserWithEmailAndPassword(email, password);\n\n        if (userCredential) {\n          try {\n            // try catch, stell dat de update mislukt, er gebeurt een foutje bij het updaten vh profiel\n            await userCredential.user.updateProfile({\n              // update via de api van firebase\n              displayName: name,\n              photoURL: avatar\n            });\n            return userCredential.user;\n          } catch (error) {\n            return error.code;\n          }\n        }\n      } catch (error) {\n        return error.code;\n      }\n    });\n\n    this.auth = firebase.auth();\n    this.auth.onAuthStateChanged(user => onAuthStateChanged(user));\n  }\n\n}\n\nexport default AuthService;","map":null,"metadata":{},"sourceType":"module"}