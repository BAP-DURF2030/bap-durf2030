{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeObservable, observable, action } from 'mobx'; // import AuthService from '../services/AuthService';\n\nimport User from '../models/User';\n\nclass UiStore {\n  constructor(rootStore) {\n    _defineProperty(this, \"onAuthStateChanged\", user => {\n      if (user) {\n        console.log(`de user is ingelogd ${user.email}`);\n        this.setCurrentUser(new User({\n          id: user.uid,\n          name: user.displayName,\n          email: user.email,\n          store: this.rootStore.userStore,\n          avatar: user.photoURL\n        }));\n      } else {\n        console.log(`de user is uitgelogd`);\n        this.setCurrentUser(undefined);\n      }\n    });\n\n    _defineProperty(this, \"loginUser\", async user => {\n      //service aanspreken\n      const result = await this.authService.login(user.email, user.password);\n      return result;\n    });\n\n    _defineProperty(this, \"logoutUser\", async () => {\n      const result = await this.authService.logout();\n      return result;\n    });\n\n    _defineProperty(this, \"registerUser\", async user => {\n      const result = await this.authService.register(user.name, user.email, user.password, user.avatar);\n      return result;\n    });\n\n    this.rootStore = rootStore;\n    this.currentUser = undefined;\n    this.authService = new AuthService(this.rootStore.firebase, this.onAuthStateChanged);\n    makeObservable(this, {\n      currentUser: observable,\n      setCurrentUser: action\n    });\n  }\n\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n\n}\n\nexport default UiStore;","map":{"version":3,"sources":["/Users/sarahvandenberghe/School/Devine/20202021/Bachelorproef/Code/nextjs/src/stores/UiStore.js"],"names":["makeObservable","observable","action","User","UiStore","constructor","rootStore","user","console","log","email","setCurrentUser","id","uid","name","displayName","store","userStore","avatar","photoURL","undefined","result","authService","login","password","logout","register","currentUser","AuthService","firebase","onAuthStateChanged"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,MAAnD,C,CACA;;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,gDAWDC,IAAD,IAAU;AAC7B,UAAIA,IAAJ,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBF,IAAI,CAACG,KAAM,EAA9C;AACA,aAAKC,cAAL,CACE,IAAIR,IAAJ,CAAS;AACPS,UAAAA,EAAE,EAAEL,IAAI,CAACM,GADF;AAEPC,UAAAA,IAAI,EAAEP,IAAI,CAACQ,WAFJ;AAGPL,UAAAA,KAAK,EAAEH,IAAI,CAACG,KAHL;AAIPM,UAAAA,KAAK,EAAE,KAAKV,SAAL,CAAeW,SAJf;AAKPC,UAAAA,MAAM,EAAEX,IAAI,CAACY;AALN,SAAT,CADF;AASD,OAXD,MAWO;AACLX,QAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb;AACA,aAAKE,cAAL,CAAoBS,SAApB;AACD;AACF,KA3BsB;;AAAA,uCA6BX,MAAOb,IAAP,IAAgB;AAC1B;AACA,YAAMc,MAAM,GAAG,MAAM,KAAKC,WAAL,CAAiBC,KAAjB,CAAuBhB,IAAI,CAACG,KAA5B,EAAmCH,IAAI,CAACiB,QAAxC,CAArB;AACA,aAAOH,MAAP;AACD,KAjCsB;;AAAA,wCAmCV,YAAY;AACvB,YAAMA,MAAM,GAAG,MAAM,KAAKC,WAAL,CAAiBG,MAAjB,EAArB;AACA,aAAOJ,MAAP;AACD,KAtCsB;;AAAA,0CAwCR,MAAOd,IAAP,IAAgB;AAC7B,YAAMc,MAAM,GAAG,MAAM,KAAKC,WAAL,CAAiBI,QAAjB,CAA0BnB,IAAI,CAACO,IAA/B,EAAqCP,IAAI,CAACG,KAA1C,EAAiDH,IAAI,CAACiB,QAAtD,EAAgEjB,IAAI,CAACW,MAArE,CAArB;AACA,aAAOG,MAAP;AACD,KA3CsB;;AACrB,SAAKf,SAAL,GAAiBA,SAAjB;AACA,SAAKqB,WAAL,GAAmBP,SAAnB;AACA,SAAKE,WAAL,GAAmB,IAAIM,WAAJ,CAAgB,KAAKtB,SAAL,CAAeuB,QAA/B,EAAyC,KAAKC,kBAA9C,CAAnB;AAEA9B,IAAAA,cAAc,CAAC,IAAD,EAAO;AACnB2B,MAAAA,WAAW,EAAE1B,UADM;AAEnBU,MAAAA,cAAc,EAAET;AAFG,KAAP,CAAd;AAID;;AAoCDS,EAAAA,cAAc,CAACJ,IAAD,EAAO;AACnB,SAAKoB,WAAL,GAAmBpB,IAAnB;AACD;;AAhDW;;AAmDd,eAAeH,OAAf","sourcesContent":["import { makeObservable, observable, action } from 'mobx';\n// import AuthService from '../services/AuthService';\nimport User from '../models/User';\n\nclass UiStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.currentUser = undefined;\n    this.authService = new AuthService(this.rootStore.firebase, this.onAuthStateChanged);\n\n    makeObservable(this, {\n      currentUser: observable,\n      setCurrentUser: action,\n    });\n  }\n\n  onAuthStateChanged = (user) => {\n    if (user) {\n      console.log(`de user is ingelogd ${user.email}`);\n      this.setCurrentUser(\n        new User({\n          id: user.uid,\n          name: user.displayName,\n          email: user.email,\n          store: this.rootStore.userStore,\n          avatar: user.photoURL,\n        })\n      );\n    } else {\n      console.log(`de user is uitgelogd`);\n      this.setCurrentUser(undefined);\n    }\n  };\n\n  loginUser = async (user) => {\n    //service aanspreken\n    const result = await this.authService.login(user.email, user.password);\n    return result;\n  };\n\n  logoutUser = async () => {\n    const result = await this.authService.logout();\n    return result;\n  };\n\n  registerUser = async (user) => {\n    const result = await this.authService.register(user.name, user.email, user.password, user.avatar);\n    return result;\n  };\n\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n}\n\nexport default UiStore;\n"]},"metadata":{},"sourceType":"module"}