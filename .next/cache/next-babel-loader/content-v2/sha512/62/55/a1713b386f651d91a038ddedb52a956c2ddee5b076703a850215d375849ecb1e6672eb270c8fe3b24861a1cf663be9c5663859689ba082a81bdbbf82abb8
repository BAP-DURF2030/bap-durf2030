{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport 'firebase/auth';\n\nclass AuthService {\n  constructor(firebase, onAuthStateChanged) {\n    _defineProperty(this, \"login\", async (email, password) => {\n      try {\n        const result = await this.auth.signInWithEmailAndPassword(email, password); // indien gelukt sturen we resultaat terug ( = firebase user)\n\n        return result;\n      } catch (error) {\n        // indien error sturen we code terug\n        return error.code;\n      }\n    });\n\n    _defineProperty(this, \"logout\", async () => {\n      try {\n        const result = await this.auth.signOut();\n        return result;\n      } catch (error) {\n        return error.code;\n      }\n    });\n\n    _defineProperty(this, \"register\", async (name, email, password, avatar) => {\n      try {\n        const userCredential = await this.auth.createUserWithEmailAndPassword(email, password);\n\n        if (userCredential) {\n          try {\n            // try catch, stell dat de update mislukt, er gebeurt een foutje bij het updaten vh profiel\n            await userCredential.user.updateProfile({\n              // update via de api van firebase\n              displayName: name,\n              photoURL: avatar\n            });\n            return userCredential.user;\n          } catch (error) {\n            return error.code;\n          }\n        }\n      } catch (error) {\n        return error.code;\n      }\n    });\n\n    this.auth = firebase.auth();\n    this.auth.onAuthStateChanged(user => onAuthStateChanged(user));\n  }\n\n}\n\nexport default AuthService;","map":{"version":3,"sources":["/Users/sarahvandenberghe/School/Devine/20202021/Bachelorproef/Code/nextjs/src/services/AuthService.js"],"names":["AuthService","constructor","firebase","onAuthStateChanged","email","password","result","auth","signInWithEmailAndPassword","error","code","signOut","name","avatar","userCredential","createUserWithEmailAndPassword","user","updateProfile","displayName","photoURL"],"mappings":";;AAAA,OAAO,eAAP;;AAEA,MAAMA,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,kBAAX,EAA+B;AAAA,mCAKlC,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACjC,UAAI;AACF,cAAMC,MAAM,GAAG,MAAM,KAAKC,IAAL,CAAUC,0BAAV,CAAqCJ,KAArC,EAA4CC,QAA5C,CAArB,CADE,CAEF;;AACA,eAAOC,MAAP;AACD,OAJD,CAIE,OAAOG,KAAP,EAAc;AACd;AACA,eAAOA,KAAK,CAACC,IAAb;AACD;AACF,KAdyC;;AAAA,oCAgBjC,YAAY;AACnB,UAAI;AACF,cAAMJ,MAAM,GAAG,MAAM,KAAKC,IAAL,CAAUI,OAAV,EAArB;AACA,eAAOL,MAAP;AACD,OAHD,CAGE,OAAOG,KAAP,EAAc;AACd,eAAOA,KAAK,CAACC,IAAb;AACD;AACF,KAvByC;;AAAA,sCAyB/B,OAAOE,IAAP,EAAaR,KAAb,EAAoBC,QAApB,EAA8BQ,MAA9B,KAAyC;AAClD,UAAI;AACF,cAAMC,cAAc,GAAG,MAAM,KAAKP,IAAL,CAAUQ,8BAAV,CAAyCX,KAAzC,EAAgDC,QAAhD,CAA7B;;AACA,YAAIS,cAAJ,EAAoB;AAClB,cAAI;AACF;AACA,kBAAMA,cAAc,CAACE,IAAf,CAAoBC,aAApB,CAAkC;AACtC;AACAC,cAAAA,WAAW,EAAEN,IAFyB;AAGtCO,cAAAA,QAAQ,EAAEN;AAH4B,aAAlC,CAAN;AAKA,mBAAOC,cAAc,CAACE,IAAtB;AACD,WARD,CAQE,OAAOP,KAAP,EAAc;AACd,mBAAOA,KAAK,CAACC,IAAb;AACD;AACF;AACF,OAfD,CAeE,OAAOD,KAAP,EAAc;AACd,eAAOA,KAAK,CAACC,IAAb;AACD;AACF,KA5CyC;;AACxC,SAAKH,IAAL,GAAYL,QAAQ,CAACK,IAAT,EAAZ;AACA,SAAKA,IAAL,CAAUJ,kBAAV,CAA8Ba,IAAD,IAAUb,kBAAkB,CAACa,IAAD,CAAzD;AACD;;AAJe;;AAgDlB,eAAehB,WAAf","sourcesContent":["import 'firebase/auth';\n\nclass AuthService {\n  constructor(firebase, onAuthStateChanged) {\n    this.auth = firebase.auth();\n    this.auth.onAuthStateChanged((user) => onAuthStateChanged(user));\n  }\n\n  login = async (email, password) => {\n    try {\n      const result = await this.auth.signInWithEmailAndPassword(email, password);\n      // indien gelukt sturen we resultaat terug ( = firebase user)\n      return result;\n    } catch (error) {\n      // indien error sturen we code terug\n      return error.code;\n    }\n  };\n\n  logout = async () => {\n    try {\n      const result = await this.auth.signOut();\n      return result;\n    } catch (error) {\n      return error.code;\n    }\n  };\n\n  register = async (name, email, password, avatar) => {\n    try {\n      const userCredential = await this.auth.createUserWithEmailAndPassword(email, password);\n      if (userCredential) {\n        try {\n          // try catch, stell dat de update mislukt, er gebeurt een foutje bij het updaten vh profiel\n          await userCredential.user.updateProfile({\n            // update via de api van firebase\n            displayName: name,\n            photoURL: avatar,\n          });\n          return userCredential.user;\n        } catch (error) {\n          return error.code;\n        }\n      }\n    } catch (error) {\n      return error.code;\n    }\n  };\n}\n\nexport default AuthService;\n"]},"metadata":{},"sourceType":"module"}